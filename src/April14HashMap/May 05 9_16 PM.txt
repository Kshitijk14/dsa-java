class Solution {
    private TreeNode LCA = null;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        lca(root, p, q);
        return LCA;
    }
    
    private boolean lca(TreeNode root, TreeNode p, TreeNode q){
        if(root==null){
            return false;
        }
        
        boolean self = (root.val==p.val || root.val==q.val);
        
        boolean left = lca(root.left, p, q);
        if(LCA!=null) return true;
        
        boolean right = lca(root.right, p, q);
        if(LCA!=null) return true;
        
        if((self&&left) || (self&&right) || (left&&right)){
            LCA = root;
        }
    
        return self || left || right;
    }
        
    }
    
    
    
    
    
package algomasters.hashmaps;

import java.util.HashMap;

public class LongestConsecutiveSequence {

    public static void main(String[] args) {
        int[] arr = {10, 5, 9, 1, 11, 8, 6, 15, 3, 12, 2};
        System.out.println("Hello World");
        System.out.println("Length:"+ longestConsecutiveSequence(arr));
    }

    public static int longestConsecutiveSequence(int [] arr){
        HashMap<Integer, Boolean> hmap = new HashMap<>();
        // 1. fill the map
        for(int val: arr){
            hmap.put(val, true);
        }
        // 2. mark the starter values of the sequence as true
        for(int val: arr){
            if(hmap.containsKey(val-1)){
                hmap.put(val, false);
            }
        }
        // 3. find the length of longest consecutive sequence
        int msp=0, ml=0;
        for(int val: arr){
            if(hmap.get(val)){
                int tl = 0;
                int tsp = val;
                while(hmap.containsKey(tsp)){
                    tsp = tsp + 1;
                    tl++;
                }
                if(tl > ml){
                    ml = tl;
                    msp = val;
                }
            }
        }
        for(int i=0; i<ml; i++){
            System.out.println(msp+i+", ");
        }
        return ml;
    }
}

    
    
    
    
    
    
    
package algomasters.priorityQueue;

import java.util.Collections;
import java.util.PriorityQueue;

public class PQDemo {

    public static void main(String[] args) {
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int i=1; i<=5; i++){
            pq.add(i);
        }
        while(!pq.isEmpty()){
            System.out.println(pq.remove());
        }
    }
}
    
    
    
    
package algomasters.priorityQueue;

import java.util.PriorityQueue;

public class PQDemo2 {

    private static class Student{
        String name;
        int marks;

        Student(String name, int marks){
            this.name = name;	
            this.marks = marks;
        }
    }


    public static void main(String[] args) {
        PriorityQueue<Student> pq = new PriorityQueue<>();
        Student s1 = new Student("Vanshita", 10);
        Student s2 = new Student("Ananya", 7);
        Student s3 = new Student("Kshitij", 8);
        Student s4 = new Student("Yash", 9);
        Student s5 = new Student("Vrinda", 6);

        pq.add(s1);
        pq.add(s2);
        pq.add(s3);
        pq.add(s4);
        pq.add(s5);

        // 1. print leaderboard
    }
}

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    